<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="readFileIntoByteArray(event)">
	<fx:Script>
		<![CDATA[
			import data.ConfigProperties;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.graphics.BitmapSmoothingQuality;
			import mx.graphics.codec.JPEGEncoder;
			import mx.messaging.channels.StreamingAMFChannel;
			import mx.utils.Base64Decoder;
			import mx.utils.Base64Encoder;
			
			import org.springextensions.actionscript.ioc.config.impl.xml.namespacehandler.INamespaceHandler;
			
			
			
			[Bindable]private var nome:String;
			[Bindable]private var lvl:String;
			[Bindable]private var race:String;
			[Bindable]private var location:String;
			[Bindable]private var sex:String;
			[Bindable]private var currentExp:Number;
			[Bindable]private var nextLevExp:Number;
			
			private var arrChar:Array;
			private var arrCharacter:Array = new Array;
			[Bindable]private var coll:ArrayCollection;
			
			private function readFileIntoByteArray(eve:FlexEvent):void 
			{ 
				trace("start loaded")
				var inFile:File = new File(ConfigProperties.getProperty(ConfigProperties.SAVEPATH)+"/Chars/Alipsya")
				arrChar = inFile.getDirectoryListing()
			//inFile = inFile.resolvePath("Salva.ess");  // name of file to read
				var _inBytes:ByteArray = new ByteArray(); 
				var inStream:FileStream = new FileStream();
				for(var i:Number = 0; i<arrChar.length-1;i++)
				{
					if(arrChar[i].extension == "ess")
					{
					_inBytes = new ByteArray()
					inStream.open(arrChar[i], FileMode.READ); 
					inStream.readBytes(_inBytes); 
					trace("done")
					inStream.close();
					arrCharacter.push(loaded2(_inBytes))
					}
				}
				coll = new ArrayCollection(arrCharacter)
				
			
			} 
			protected function loaded2(inBytes:ByteArray):Object
			{
				try
				{
				var w:int;
				var h:int;
				var l:uint;
				var tmpArr:ByteArray = new ByteArray()
					var ni:int;
				inBytes.endian = Endian.LITTLE_ENDIAN
				inBytes.position = 0
				trace(inBytes.readUTFBytes(13))
				trace('1',inBytes.position)
				
				trace(inBytes.readInt())
				trace('2',inBytes.position)
				trace(inBytes.readInt())
				trace('3',inBytes.position)
				trace(inBytes.readInt())
				trace('4',inBytes.position)
				trace(ni = inBytes.readShort())
				trace('5',inBytes.position)
				nome = inBytes.readUTFBytes(ni)
				trace('6',inBytes.position)
				lvl = inBytes.readInt().toString();
				trace('7',inBytes.position);
				trace(ni = inBytes.readShort())
				trace('8',inBytes.position);
				location = inBytes.readUTFBytes(ni)
				trace('9',inBytes.position);
				trace(ni = inBytes.readShort())
				trace('10',inBytes.position);
				trace(inBytes.readUTFBytes(ni))
				trace('11',inBytes.position);
				trace(ni = inBytes.readShort())
				trace('12',inBytes.position);
				race = inBytes.readUTFBytes(ni)
				trace('13',inBytes.position);
				sex = inBytes.readShort().toString()
				trace('14',inBytes.position);
				currentExp = inBytes.readFloat()
				trace('15',inBytes.position);
				nextLevExp = inBytes.readFloat()
				trace('16',inBytes.position);
				trace(inBytes.readDouble())
				trace('17',inBytes.position);
				trace(w = inBytes.readInt())
				trace('18',inBytes.position);
				trace(h = inBytes.readInt())
				trace('19',inBytes.position);
				/* trace(inBytes.readInt())
				trace('20',inBytes.position);
				trace(inBytes.readByte())
				trace('21',inBytes.position); */
				l = 3*w*h
					
				var bitmapData:BitmapData;
				var bitmapBA:ByteArray = new ByteArray();
				var bitmap:Bitmap;
				//bitmapBA.endian = Endian.LITTLE_ENDIAN
				inBytes.readBytes(bitmapBA,0,l)
				
				trace('20',inBytes.position);
				trace(inBytes.readByte())
				trace('21',inBytes.position);
				bitmapData = new BitmapData(w, h);
				bitmapBA.position = 0
				bitmapBA.endian = Endian.LITTLE_ENDIAN
				
				for(var i:Number =0; i<h; i++)
				{
					for(var j:Number =0; j<w; j++)
					{
						var alphaValue = 0
						var redValue = bitmapBA.readByte();
						var greenValue = bitmapBA.readByte();
						var blueValue = bitmapBA.readByte();
						var color:uint = alphaValue << 32 | redValue << 16 | greenValue << 8 | blueValue;
						bitmapData.setPixel(j,i,color);
						//bitmapData.setPixel32(j,i, color);
					}
				}
				
				bitmapData.lock()
				// set the pixels of a bitmap from the loaded bitmapdata bytearray
				
				
				var bit:Bitmap = new Bitmap(bitmapData)
			
					
				/* 	bi.source = bit
					bi.smoothingQuality = BitmapSmoothingQuality.HIGH
					bi.smooth = true */
				}
			catch(err:Error)
			{
			}
				var tmpObj:Object = new Object;
				tmpObj.nome = nome
				tmpObj.lvl = lvl
				tmpObj.location = location
				tmpObj.race = race
				tmpObj.sex = sex
				tmpObj.currentExp = currentExp
				tmpObj.nextLevExp = nextLevExp
				tmpObj.img = bit
				return tmpObj;
				
					
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:DataGrid id="dataGrid" dataProvider="{coll}" height="100%" width="100%" />
	
	<!--<s:VGroup verticalAlign="middle" width="320" >
		
	<s:BitmapImage  id="bi" />
	
	<s:Label text="Name:" fontFamily="BaseFont" width="320"  />
		<s:Label fontFamily="MorrisRomanBlack" text="{nome}" width="320" fontSize="24"/>
	<s:Label text="Level:" fontFamily="BaseFont" width="320" />
		<s:Label fontFamily="MorrisRomanBlack" text="{lvl}" width="320" fontSize="24" />
	<s:Label text="Race:" fontFamily="BaseFont" width="320" />
		<s:Label fontFamily="MorrisRomanBlack" text="{race}" width="320" fontSize="24"/>
	<s:Label text="Location:" fontFamily="BaseFont" width="320" />
		<s:Label fontFamily="MorrisRomanBlack" text="{location}" width="320" fontSize="24"/>
	</s:VGroup>-->
	
</s:WindowedApplication>
